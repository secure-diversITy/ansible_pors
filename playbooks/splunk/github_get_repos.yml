---
- name: "Github: get repo locations"
  hosts: pors_server
  connection: local

  pre_tasks:
    - name: "Verify git_server_type"
      fail:
        msg: "ERROR: git_server_type variable is not set to 'github'"
      when: git_server_type is undefined or git_server_type != 'github'

  tasks: 
    - set_fact:
        repo_uri: "{{ git_server }}/{{ git_uri_group }}/repos?per_page=100&page"

    - name: Get pagination count
      uri:
        url: '{{ repo_uri }}=1'
        headers:
            Authorization: "token {{ vault_git_ro_token }}"
        return_content: no
      no_log: true
      register: pages

    - set_fact:
        page_count: "{{ pages.link | default('next,&page=1,last')| regex_replace('.*next.*&page=([0-9]+).*last.*$','\\1') }}"

#    - debug:
#        msg: "Detected page_count: {{page_count}}"

    - name: Fetch all repos
      uri:
        url: '{{ repo_uri }}={{ item }}'
        headers:
            Authorization: "token {{ vault_git_ro_token }}"
        return_content: yes
      register: gh_out
      no_log: true
      loop: "{{ range(1, page_count|int+1)| list }}"

#    - debug:
#        var: gh_out

    - name: Clean any previous repo file
      file:
        path: "{{ git_tmp_repos_file }}"
        state: absent

    - set_fact:
        all_repos: []

    - name: Collect repo locations (http - based)
      set_fact:
        all_repos: "{{ all_repos }} + [ '{{ item.clone_url }}={{ item.default_branch }}' ]"
      no_log: true
      when:
        - git_access_type == "http"
        - not use_git_apps_filter or (use_git_apps_filter and item.clone_url | regex_search(git_apps_filter))
      loop: "{{ gh_out.results | json_query('[*].json[*].{clone_url:clone_url,default_branch:default_branch}') | flatten(1) }}"

    - name: Collect repo locations (ssh - based)
      set_fact:
        all_repos: "{{ all_repos }} + [ '{{ item.ssh_url }}={{ item.default_branch }}' ]"
      no_log: true
      when:
        - git_access_type == "ssh"
        - not use_git_apps_filter or (use_git_apps_filter and item.clone_url | regex_search(git_apps_filter))
      loop: "{{ gh_out.results | json_query('[*].json[*].{ssh_url: ssh_url,default_branch:default_branch}') | flatten(1) }}"

    - name: "Write repo cache file ({{ git_tmp_repos_file }})"
      lineinfile:
        dest: "{{ git_tmp_repos_file }}"
        line: "{{ all_repos | join(',') }}"
        state: present
        create: yes
